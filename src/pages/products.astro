---
import PageLayout from '~/layouts/PageLayout.astro';
import { getKibbleRecommendations } from '../lib/kibbleService';


const metadata = {
  title: 'Hundefutter Konfigurator',
};

const dogBreeds = ['Deutscher Schäferhund', 'Rottweiler', 'Dackel', 'Golden Retriever'];
---

<PageLayout metadata={metadata}>
  <div class="max-w-4xl mx-auto p-4 bg-page">
    <form id="dog-configurator" class="space-y-8">
      <div class="step-1">
        <h2 class="text-2xl font-heading font-bold mb-6 text-page">Wie heißt dein Hund?</h2>

        <div class="flex space-x-4 mb-4">
          <label
            class="flex-1 flex items-center justify-center p-3 border rounded-lg cursor-pointer group hover:border-primary">
            <input
              type="radio"
              name="dogGender"
              value="male"
              required
              class="mr-2"
            >
            <span class="text-page group-hover:text-primary">Er heißt</span>
          </label>
          <label
            class="flex-1 flex items-center justify-center p-3 border rounded-lg cursor-pointer group hover:border-primary">
            <input
              type="radio"
              name="dogGender"
              value="female"
              required
              class="mr-2"
            >
            <span class="text-page group-hover:text-primary">Sie heißt</span>
          </label>
        </div>

        <input
          type="text"
          name="dogName"
          class="w-full p-3 rounded-lg border border-gray-400 bg-transparent text-page focus:ring-2 focus:ring-primary transition duration-200"
          required
          minlength="2"
          placeholder="Name eingeben"
        />
      </div>

      <div class="step-2 hidden">
        <h2 class="text-2xl font-heading font-bold mb-6 text-page">Wurde <span class="dog-name"></span> kastriert?</h2>
        <div class="space-y-4">
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="isNeutered" value="yes" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Ja</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="isNeutered" value="no" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Nein</span>
          </label>
        </div>
      </div>

      <div class="step-3 hidden">
        <h2 class="text-2xl font-heading font-bold mb-6 text-page">Wie alt ist <span class="dog-name"></span>?</h2>
        <div class="flex space-x-4">
          <div class="flex-1">
            <input
              type="number"
              name="ageYears"
              min="0"
              max="25"
              class="w-full p-3 rounded-lg border border-gray-400 bg-transparent text-page focus:ring-2 focus:ring-primary transition duration-200"
              required
              placeholder="Alter in Jahren"
            />
          </div>
          <div class="flex-1">
            <input
              type="number"
              name="ageMonths"
              min="0"
              max="11"
              class="w-full p-3 rounded-lg border border-gray-400 bg-transparent text-page focus:ring-2 focus:ring-primary transition duration-200"
              placeholder="Monate (optional)"
            />
          </div>
        </div>
      </div>

      <div class="step-4 hidden">
        <h2 class="text-2xl font-heading font-bold mb-6 text-page">Rasse von <span class="dog-name"></span></h2>

        <div class="flex space-x-4 mb-6">
          <label
            class="flex-1 flex items-center justify-center p-3 border rounded-lg cursor-pointer group hover:border-primary">
            <input
              type="radio"
              name="breedType"
              value="purebred"
              required
              class="mr-2"
            >
            <span class="text-page group-hover:text-primary">Reinrassig</span>
          </label>
          <label
            class="flex-1 flex items-center justify-center p-3 border rounded-lg cursor-pointer group hover:border-primary">
            <input
              type="radio"
              name="breedType"
              value="mixed"
              required
              class="mr-2"
            >
            <span class="text-page group-hover:text-primary">Mischling</span>
          </label>
          <label
            class="flex-1 flex items-center justify-center p-3 border rounded-lg cursor-pointer group hover:border-primary">
            <input
              type="radio"
              name="breedType"
              value="unknown"
              required
              class="mr-2"
            >
            <span class="text-page group-hover:text-primary">Ich kenne die Rasse nicht</span>
          </label>
        </div>

        <!-- Reinrassig -->
        <div id="purebred-select" class="hidden">
          <select
            name="breed"
            class="w-full p-3 rounded-lg border border-gray-400 bg-transparent text-page focus:ring-2 focus:ring-primary transition duration-200"
            required
          >
            <option value="">Bitte Rasse wählen</option>
            {dogBreeds.map(breed => (
              <option value={breed}>{breed}</option>
            ))}
          </select>
        </div>

        <!-- Mischling -->
        <div id="mixed-select" class="hidden space-y-4">
          <select
            name="breed1"
            class="w-full p-3 rounded-lg border border-gray-400 bg-transparent text-page focus:ring-2 focus:ring-primary transition duration-200"
            required
          >
            <option value="">Erste Rasse wählen</option>
            {dogBreeds.map(breed => (
              <option value={breed}>{breed}</option>
            ))}
          </select>
          <select
            name="breed2"
            class="w-full p-3 rounded-lg border border-gray-400 bg-transparent text-page focus:ring-2 focus:ring-primary transition duration-200"
            required
          >
            <option value="">Zweite Rasse wählen</option>
            {dogBreeds.map(breed => (
              <option value={breed}>{breed}</option>
            ))}
          </select>
        </div>

        <!-- Unbekannte Rasse -->
        <div id="unknown-weight" class="hidden space-y-3">
          <p class="text-page mb-4">Was ist das ausgewachsene Gewicht von <span class="dog-name"></span>?</p>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="weight" value="mini" required class="mr-2">
            <span class="text-page group-hover:text-primary">Mini (unter 5kg)</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="weight" value="small" required class="mr-2">
            <span class="text-page group-hover:text-primary">Klein (5-10kg)</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="weight" value="medium" required class="mr-2">
            <span class="text-page group-hover:text-primary">Mittel (10-25kg)</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="weight" value="large" required class="mr-2">
            <span class="text-page group-hover:text-primary">Groß (25-45kg)</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="weight" value="giant" required class="mr-2">
            <span class="text-page group-hover:text-primary">Riese (über 45kg)</span>
          </label>
        </div>
      </div>

      <!-- Schritt 5: Aktuelles Gewicht -->
      <div class="step-5 hidden">
        <h2 class="text-2xl font-heading font-bold mb-6 text-page">
          Wie schwer ist <span class="dog-name"></span> aktuell?
        </h2>
        <div class="flex items-center space-x-2">
          <input
            type="number"
            name="currentWeight"
            value="5"
            min="0.1"
            max="60"
            step="0.1"
            class="w-32 p-3 rounded-lg border border-gray-400 bg-transparent text-page focus:ring-2 focus:ring-primary transition duration-200"
            required
          />
          <span class="text-page">kg</span>
        </div>
      </div>

      <!-- Schritt 6: Körperliche Verfassung -->
      <div class="step-6 hidden">
        <h2 class="text-2xl font-heading font-bold mb-6 text-page">
          Welche körperliche Verfassung beschreibt <span class="dog-name"></span> am Besten?
        </h2>
        <div class="space-y-4">
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="bodyCondition" value="very-underweight" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Stark untergewichtig</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="bodyCondition" value="underweight" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Untergewichtig</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="bodyCondition" value="ideal" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Ideal</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="bodyCondition" value="overweight" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Übergewichtig</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="bodyCondition" value="obese" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Fettleibig</span>
          </label>
        </div>
      </div>

      <!-- Schritt 7: Aktivitätslevel -->
      <div class="step-7 hidden">
        <h2 class="text-2xl font-heading font-bold mb-6 text-page">
          Wie aktiv ist <span class="dog-name"></span> am Tag?
        </h2>
        <div class="space-y-4">
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="activityLevel" value="very-low" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">< 30 Min</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="activityLevel" value="low" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">30 Min - 1 Stunde</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="activityLevel" value="medium" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">1 - 2 Stunden</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="activityLevel" value="high" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Mehr als 2 Stunden</span>
          </label>
        </div>
      </div>

      <!-- Schritt 8: Gesundheitliche Probleme -->
      <div class="step-8 hidden">
        <h2 class="text-2xl font-heading font-bold mb-6 text-page">
          Hat <span class="dog-name"></span> gesundheitliche Probleme?
        </h2>
        <div class="space-y-4 mb-6">
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="hasHealthIssues" value="yes" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Ja</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="hasHealthIssues" value="no" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Nein</span>
          </label>
        </div>
        <!-- Gesundheitsprobleme Details (anfangs versteckt) -->
        <div id="health-issues-details" class="hidden space-y-4">
          <h3 class="text-xl font-heading font-bold mb-4 text-page">Welche Beschwerden gibt es?</h3>

          <div class="space-y-3">
            <label class="flex items-center space-x-3">
              <input type="checkbox" name="health[]" value="digestion" class="w-4 h-4">
              <span>Verdauung</span>
            </label>
            <label class="flex items-center space-x-3">
              <input type="checkbox" name="health[]" value="joints" class="w-4 h-4">
              <span>Gelenkprobleme</span>
            </label>
            <label class="flex items-center space-x-3">
              <input type="checkbox" name="health[]" value="skin" class="w-4 h-4">
              <span>Haut & Fell</span>
            </label>
            <label class="flex items-center space-x-3">
              <input type="checkbox" name="health[]" value="bladder" class="w-4 h-4">
              <span>Blasenprobleme</span>
            </label>
            <label class="flex items-center space-x-3">
              <input type="checkbox" name="health[]" value="behavior" class="w-4 h-4">
              <span>Stress / Aggression</span>
            </label>
            <label class="flex items-center space-x-3">
              <input type="checkbox" name="health[]" value="dental" class="w-4 h-4">
              <span>Zahnprobleme</span>
            </label>
            <label class="flex items-center space-x-3">
              <input type="checkbox" name="health[]" value="allergies" class="w-4 h-4">
              <span>Allergien</span>
            </label>
            <label class="flex items-center space-x-3">
              <input type="checkbox" name="health[]" value="other" class="w-4 h-4">
              <span>Sonstiges</span>
            </label>
          </div>
        </div>
      </div>

      <!-- Schritt 9: Leckerlis -->
      <div class="step-9 hidden">
        <h2 class="text-2xl font-heading font-bold mb-6 text-page">
          Wie viele Leckerlis bekommt <span class="dog-name"></span>?
        </h2>
        <div class="space-y-4">
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="treats" value="none" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Keine</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="treats" value="few-weekly" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Ein paar pro Woche</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="treats" value="few-daily" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Ein paar pro Tag</span>
          </label>
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="radio" name="treats" value="many-daily" required
                   class="w-5 h-5 border-2 border-gray-400 text-primary focus:ring-primary transition duration-200">
            <span class="text-page group-hover:text-primary transition duration-200">Viele am Tag</span>
          </label>
        </div>
      </div>

      <div class="flex justify-between pt-6">
        <button
          type="button"
          id="prevButton"
          class="btn btn-secondary hidden">
          Zurück
        </button>
        <button
          type="button"
          id="nextButton"
          class="btn btn-primary">
          Weiter
        </button>
      </div>
    </form>

    <div id="snipcart-container" class="hidden mt-8 space-y-6">
      <div class="bg-white p-6 rounded-lg shadow-lg">
        <h3 class="text-xl font-heading font-bold mb-4 text-page">Deine Auswahl</h3>
        <div id="summary" class="text-muted"></div>
      </div>

      <button
        class="snipcart-add-item btn btn-primary w-full justify-center"
        data-item-id="custom-dog-food"
        data-item-price="39.99"
        data-item-url="/produkte"
        data-item-description=""
        data-item-image=""
        data-item-name=""
        data-item-custom1-name="Portiongröße"
        data-item-custom1-options="Klein|Mittel[+10.00]|Groß[+20.00]"
      >
        In den Warenkorb
      </button>
    </div>
  </div>
</PageLayout>

<script is:inline>
  // Globale Konstanten und Datenstrukturen
  const foodImages = {
    default: '/images/Kibble01.png',
    small: '/images/Kibble01-small.png',
    large: '/images/Kibble01-large.png'
  };

  const dogData = {
    gender: '',
    name: '',
    isNeutered: false,
    age: {
      years: 0,
      months: 0
    },
    breedType: '',
    breed: '',
    breed2: '', 
    weight: '',
    currentWeight: 5,
    bodyCondition: '',
    activityLevel: '',
    treats: '',
    hasHealthIssues: false,
    healthIssues: []
  };

  // Hauptinitialisierungsfunktion
  window.initializeDogConfigurator = function () {
    const form = document.getElementById('dog-configurator');
    if (!form) return false;

    const nextButton = document.getElementById('nextButton');
    const prevButton = document.getElementById('prevButton');
    const snipcartContainer = document.getElementById('snipcart-container');
    const summaryDiv = document.getElementById('summary');

    if (!nextButton || !prevButton || !snipcartContainer || !summaryDiv) return false;

    // Entferne alte Event Listener durch Klonen
    const newNextButton = nextButton.cloneNode(true);
    const newPrevButton = prevButton.cloneNode(true);
    nextButton.parentNode.replaceChild(newNextButton, nextButton);
    prevButton.parentNode.replaceChild(newPrevButton, prevButton);

    let currentStep = 1;

    // Event Listeners
    newNextButton.addEventListener('click', async () => {
      console.log('Next clicked, current step:', currentStep);
      if (!validateStep()) {
        return;
      }

      if (currentStep < 9) {
        showStep(currentStep + 1)
      } else {
        await finishConfiguration();
      }
    });
    
    newPrevButton.addEventListener('click', () => {
      if (currentStep > 1) {
        showStep(currentStep - 1);
      }
    });

    const nameInput = form.querySelector('[name="dogName"]');
    if (nameInput) {
      nameInput.addEventListener('input', updateDogName);
    }

    function updateDogName() {
      const nameInput = form.querySelector('[name="dogName"]');
      const nameSpans = document.querySelectorAll('.dog-name');
      if (nameInput instanceof HTMLInputElement) {
        dogData.name = nameInput.value || '';
        nameSpans.forEach(span => {
          if (span instanceof HTMLElement) {
            span.textContent = nameInput.value || '';
          }
        });
      }
    }

    function showStep(step) {
      const steps = document.querySelectorAll('[class^="step-"]');
      steps.forEach(el => el.classList.add('hidden'));

      const nextStep = document.querySelector(`.step-${step}`);
      if (nextStep) {
        nextStep.classList.remove('hidden');
      }

      newPrevButton.classList.toggle('hidden', step === 1);
      newNextButton.textContent = step === 9 ? 'Fertig' : 'Weiter';  // Änderung von 4 auf 6
      currentStep = step;
    }
    const healthRadios = form.querySelectorAll('[name="hasHealthIssues"]');
    const healthDetails = document.getElementById('health-issues-details');

    healthRadios.forEach(radio => {
      radio.addEventListener('change', () => {
        if (radio instanceof HTMLInputElement) {
          dogData.hasHealthIssues = radio.value === 'yes';
          if (healthDetails) {
            healthDetails.classList.toggle('hidden', !dogData.hasHealthIssues);
          }
        }
      });
    });
    
    // Geschlechts-Handler
    const genderInputs = form.querySelectorAll('[name="dogGender"]');
    genderInputs.forEach(input => {
      input.addEventListener('change', () => {
        if (input instanceof HTMLInputElement) {
          dogData.gender = input.value;
        }
      });
    });

    // Rassen-Typ-Handler
    const breedTypeInputs = form.querySelectorAll('[name="breedType"]');
    const purebredSelect = document.getElementById('purebred-select');
    const mixedSelect = document.getElementById('mixed-select');
    const unknownWeight = document.getElementById('unknown-weight');

    breedTypeInputs.forEach(input => {
      input.addEventListener('change', () => {
        if (input instanceof HTMLInputElement) {
          // Verstecke alle Optionen
          purebredSelect?.classList.add('hidden');
          mixedSelect?.classList.add('hidden');
          unknownWeight?.classList.add('hidden');

          // Zeige die gewählte Option
          switch (input.value) {
            case 'purebred':
              purebredSelect?.classList.remove('hidden');
              break;
            case 'mixed':
              mixedSelect?.classList.remove('hidden');
              break;
            case 'unknown':
              unknownWeight?.classList.remove('hidden');
              break;
          }

          dogData.breedType = input.value;
        }
      });
    });
    

    function validateStep() {
      const currentStepEl = document.querySelector(`.step-${currentStep}`);
      if (!currentStepEl) return false;

      const inputs = currentStepEl.querySelectorAll('input, select');
      let isValid = true;

      currentStepEl.querySelectorAll('.error-message').forEach(msg => msg.remove());

      switch(currentStep) {
        case 1: {
          const genderSelected = Array.from(genderInputs).some(input =>
            input instanceof HTMLInputElement && input.checked
          );
          if (!genderSelected) {
            isValid = false;
            const err = document.createElement('div');
            err.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');
            err.textContent = 'Bitte wähle das Geschlecht aus';
            genderInputs[0].parentElement?.parentElement?.appendChild(err);
          }
          break;
        }
        case 4: {
          const breedTypeSelected = Array.from(breedTypeInputs).some(input =>
            input instanceof HTMLInputElement && input.checked
          );
          if (!breedTypeSelected) {
            isValid = false;
            const err = document.createElement('div');
            err.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');
            err.textContent = 'Bitte wähle eine Rassen-Option aus';
            breedTypeInputs[0].parentElement?.parentElement?.appendChild(err);
          }
          break;
        }
        case 5: {
          const weightInput = currentStepEl.querySelector('[name="currentWeight"]');
          if (weightInput instanceof HTMLInputElement) {
            const weight = parseFloat(weightInput.value || '0');
            if (isNaN(weight) || weight < 0.1 || weight > 60) {
              isValid = false;
              const err = document.createElement('div');
              err.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');
              err.textContent = 'Bitte gib ein gültiges Gewicht zwischen 0,1 und 60 kg ein';
              weightInput.parentElement?.appendChild(err);
            }
          }
          break;
        }
        case 6: {
          const bodyConditionSelected = Array.from(
            currentStepEl.querySelectorAll('[name="bodyCondition"]')
          ).some(input => input instanceof HTMLInputElement && input.checked);

          if (!bodyConditionSelected) {
            isValid = false;
            const err = document.createElement('div');
            err.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');
            err.textContent = 'Bitte wähle eine körperliche Verfassung aus';
            currentStepEl.querySelector('.space-y-4')?.appendChild(err);
          }
          break;
        }
        case 7: {
          const activitySelected = Array.from(
            currentStepEl.querySelectorAll('[name="activityLevel"]')
          ).some(input => input instanceof HTMLInputElement && input.checked);

          if (!activitySelected) {
            isValid = false;
            const err = document.createElement('div');
            err.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');
            err.textContent = 'Bitte wähle ein Aktivitätslevel aus';
            currentStepEl.querySelector('.space-y-4')?.appendChild(err);
          }
          break;
        }
        case 8: {
          // 1) Prüfen, ob überhaupt "Ja" oder "Nein" ausgewählt wurde:
          const yesRadio = currentStepEl.querySelector('[name="hasHealthIssues"][value="yes"]');
          const noRadio = currentStepEl.querySelector('[name="hasHealthIssues"][value="no"]');

          // Hat der Nutzer weder "Ja" noch "Nein" ausgewählt?
          if (!(yesRadio?.checked || noRadio?.checked)) {
            isValid = false;
            const err = document.createElement('div');
            err.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');
            err.textContent = 'Bitte wähle aus, ob gesundheitliche Probleme vorhanden sind: Ja oder Nein';
            currentStepEl.querySelector('.mb-6')?.appendChild(err);
            break;
          }

          // 2) Nur wenn "Ja" angekreuzt ist, mind. 1 Checkbox fordern
          if (yesRadio.checked) {
            const healthIssuesSelected = Array.from(
              currentStepEl.querySelectorAll('[name="health[]"]')
            ).some(input => input instanceof HTMLInputElement && input.checked);

            if (!healthIssuesSelected) {
              isValid = false;
              const err = document.createElement('div');
              err.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');
              err.textContent = 'Bitte wähle mindestens eine Beschwerde aus, wenn du "Ja" angegeben hast';
              currentStepEl.querySelector('#health-issues-details')?.appendChild(err);
            }
          }

          break;
        }
        case 9: {
          const treatsSelected = Array.from(
            currentStepEl.querySelectorAll('[name="treats"]')
          ).some(input => input instanceof HTMLInputElement && input.checked);

          if (!treatsSelected) {
            isValid = false;
            const err = document.createElement('div');
            err.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');
            err.textContent = 'Bitte wähle eine Option aus';
            currentStepEl.querySelector('.space-y-4')?.appendChild(err);
          }
          break;
        }
      }

      inputs.forEach(input => {
        if (input instanceof HTMLInputElement || input instanceof HTMLSelectElement) {
          // Überspringe Validierung für versteckte Felder
          const container = input.closest('div');
          if (container?.classList.contains('hidden')) return;

          if (!input.checkValidity()) {
            isValid = false;
            const err = document.createElement('div');
            err.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');
            err.textContent = input.validationMessage;
            input.parentElement?.appendChild(err);
          }
        }
      });

      return isValid;
    }

    async function finishConfiguration() {
      const formData = new FormData(form);

      // Bisherige Daten
      dogData.name = formData.get('dogName')?.toString() || '';
      dogData.isNeutered = formData.get('isNeutered') === 'yes';
      dogData.age.years = parseInt(formData.get('ageYears')?.toString() || '0');
      dogData.age.months = parseInt(formData.get('ageMonths')?.toString() || '0');
      dogData.gender = formData.get('dogGender')?.toString() || '';
      dogData.breedType = formData.get('breedType')?.toString() || '';
      dogData.currentWeight = parseFloat(formData.get('currentWeight')?.toString() || '5');
      dogData.bodyCondition = formData.get('bodyCondition')?.toString() || '';
      dogData.activityLevel = formData.get('activityLevel')?.toString() || '';
      dogData.treats = formData.get('treats')?.toString() || '';

      // Gesundheitsprobleme sammeln
      dogData.hasHealthIssues = formData.get('hasHealthIssues') === 'yes';
      if (dogData.hasHealthIssues) {
        dogData.healthIssues = formData.getAll('health[]').map(issue => issue.toString());
      } else {
        dogData.healthIssues = [];
      }

      switch(dogData.breedType) {
        case 'purebred':
          dogData.breed = formData.get('breed')?.toString();
          dogData.breed2 = undefined;
          dogData.weight = undefined;
          break;
        case 'mixed':
          dogData.breed = formData.get('breed1')?.toString();
          dogData.breed2 = formData.get('breed2')?.toString();
          dogData.weight = undefined;
          break;
        case 'unknown':
          dogData.breed = undefined;
          dogData.breed2 = undefined;
          dogData.weight = formData.get('weight')?.toString() || undefined;
          break;
      }

      console.log('Gesammelte Hundedaten:', dogData);

      try {
        console.log('Starte Kibble-Berechnung...');
        const response = await fetch('/api/kibble-recommendations', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(dogData)
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const recommendations = await response.json();
        console.log('Erhaltene Empfehlungen:', recommendations);

        // Bisherige Zusammenfassung
        const healthIssuesTexts = {
          'digestion': 'Verdauung',
          'joints': 'Gelenkprobleme',
          'skin': 'Haut & Fell',
          'bladder': 'Blasenprobleme',
          'behavior': 'Stress / Aggression',
          'dental': 'Zahnprobleme',
          'allergies': 'Allergien',
          'other': 'Sonstiges'
        };

        const ageSummary = dogData.age.months
          ? `${dogData.age.years} Jahre und ${dogData.age.months} Monate`
          : `${dogData.age.years} Jahre`;

        const bodyConditionTexts = {
          'very-underweight': 'Stark untergewichtig',
          'underweight': 'Untergewichtig',
          'ideal': 'Ideal',
          'overweight': 'Übergewichtig',
          'obese': 'Fettleibig'
        };

        const activityTexts = {
          'very-low': 'weniger als 30 Min',
          'low': '30 Min - 1 Stunde',
          'medium': '1 - 2 Stunden',
          'high': 'Mehr als 2 Stunden'
        };

        const treatTexts = {
          'none': 'Keine',
          'few-weekly': 'Ein paar pro Woche',
          'few-daily': 'Ein paar pro Tag',
          'many-daily': 'Viele am Tag'
        };

        const breedSummary = (() => {
          switch(dogData.breedType) {
            case 'purebred':
              return dogData.breed;
            case 'mixed':
              return `Mischling (${dogData.breed} / ${dogData.breed2})`;
            case 'unknown':
              const weightTexts = {
                mini: 'Mini (unter 5kg)',
                small: 'Klein (5-10kg)',
                medium: 'Mittel (10-25kg)',
                large: 'Groß (25-45kg)',
                giant: 'Riese (über 45kg)'
              };
              return `Unbekannte Rasse - ${weightTexts[dogData.weight] || ''}`;
            default:
              return '';
          }
        })();

        const healthSummary = dogData.hasHealthIssues
          ? dogData.healthIssues.map(issue => healthIssuesTexts[issue]).join(', ')
          : 'Keine gesundheitlichen Probleme';

        // HTML für Empfehlungen erstellen
        const recommendationsHtml = recommendations.map((kibble, index) => `
      <div class="bg-white p-4 rounded-lg shadow-lg mb-4">
        <div class="flex justify-between items-start">
          <h4 class="font-bold">Empfehlung ${index + 1}</h4>
          <span class="text-sm text-gray-500">Übereinstimmung: ${Math.round((kibble.score || 0) * 10)}%</span>
        </div>
        <p class="text-sm mb-2">Protein: ${kibble.Proteinquelle}</p>
        <p class="text-sm mb-2">Empfohlen für: ${kibble["Empfohlen für"].join(", ")}</p>
        <p class="text-sm">Besondere Eigenschaften: ${kibble["Ziel"].join(", ")}</p>
      </div>
    `).join('');

        // Zusammenfassung anzeigen
        summaryDiv.innerHTML = `
      <div class="mb-6">
        <p class="mb-2">Name: ${dogData.name} (${dogData.gender === 'male' ? 'männlich' : 'weiblich'})</p>
        <p class="mb-2">${dogData.isNeutered ? 'Kastriert' : 'Nicht kastriert'}</p>
        <p class="mb-2">Alter: ${ageSummary}</p>
        <p class="mb-2">Rasse: ${breedSummary}</p>
        <p class="mb-2">Aktuelles Gewicht: ${dogData.currentWeight} kg</p>
        <p class="mb-2">Körperliche Verfassung: ${bodyConditionTexts[dogData.bodyCondition]}</p>
        <p class="mb-2">Aktivität pro Tag: ${activityTexts[dogData.activityLevel]}</p>
        <p class="mb-2">Leckerlis: ${treatTexts[dogData.treats]}</p>
        <p class="mb-4">Gesundheitliche Probleme: ${healthSummary}</p>
      </div>
      
      <div class="mt-6">
        <h3 class="text-xl font-bold mb-4">Unsere Empfehlungen</h3>
        ${recommendationsHtml}
      </div>
      
      <button
        id="editAnswers"
        class="btn btn-secondary mt-4"
        type="button"
      >
        Antworten ändern
      </button>
    `;

      } catch (error) {
        console.error('Fehler bei der Berechnung:', error);
        summaryDiv.innerHTML = `
      <div class="text-red-500">
        Es ist ein Fehler bei der Berechnung aufgetreten. Bitte versuche es später erneut.
      </div>
      <button
        id="editAnswers"
        class="btn btn-secondary mt-4"
        type="button"
      >
        Zurück
      </button>
    `;
      }

      // Event Listener für den Edit-Button
      document.getElementById('editAnswers')?.addEventListener('click', () => {
        snipcartContainer.classList.add('hidden');
        form.classList.remove('hidden');
        showStep(currentStep - 1);
      });

      // Update Snipcart Button
      const snipcartButton = document.querySelector('.snipcart-add-item');
      if (snipcartButton) {
        const description = `Individuelles Hundefutter für ${dogData.name}`;
        snipcartButton.setAttribute('data-item-name', `Hundefutter für ${dogData.name}`);
        snipcartButton.setAttribute('data-item-description', description);
        snipcartButton.setAttribute('data-item-image', foodImages.default);
      }

      form.classList.add('hidden');
      snipcartContainer.classList.remove('hidden');
    }

    // Initialisiere ersten Schritt
    showStep(1);
    return true;
  }

  // Setup-Funktion
  function setupConfigurator() {
    console.log('Setting up configurator');
    const result = window.initializeDogConfigurator();
    console.log('Setup result:', result);
  }

  // Initialisiere bei verschiedenen Events
  document.addEventListener('DOMContentLoaded', setupConfigurator);
  document.addEventListener('astro:page-load', setupConfigurator);
  document.addEventListener('astro:after-swap', () => {
    setTimeout(setupConfigurator, 0);
  });

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupConfigurator);
  } else {
    setupConfigurator();
  }
</script>


<script>
  document.addEventListener('astro:after-swap', () => {
    setTimeout(() => {
      if (document.getElementById('dog-configurator')) {
        window.initializeDogConfigurator();
      }
    }, 0);
  });
</script>
